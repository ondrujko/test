import urllib
import telebot
from telebot import types
import config
from instaparser import Scrap
import gc

bot = telebot.TeleBot(config.token)
anw = 10
sc = None

# –ó–∞–ø—É—Å—Ç–∏—Ç—å / –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–Ω–æ–ø–∫–∏
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  # Create keyboard markup
    item1 = types.KeyboardButton('üîé–ò–Ω—Å—Ç–∞–≥—Ä–∞–º –ø–∞—Ä—Å–∏–Ω–≥')
    item2 = types.KeyboardButton('‚è≥–ü—Ä–æ—Ü–µ—Å—Å')
    item4 = types.KeyboardButton('üì•–ó–∞–ø—Ä–æ—Å–∏—Ç—å —É–∂–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã')
    item3 = types.KeyboardButton('üç™–ó–∞–≥—Ä—É–∑–∏—Ç—å cookies')
    markup.add(item1, item2)  # Firs line buttons
    markup.add(item4)
    markup.add(item3)  # Second line buttons
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=markup)


@bot.message_handler(commands=['restart'])
def restart(message):
    bot.send_message(message.chat.id, '–ë–æ—Ç –Ω–∞—á–∞–ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 1-2 –º–∏–Ω—É—Ç—ã.')
    try:
        sc.close_all_drivers()
    except Exception as e:
        print(e)
    if sc.saved(sc.marks):
        try:
            file = open('result_parser.txt', 'rb')
            bot.send_document(message.chat.id, file)
            file.close()
        except:
            bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.')
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
    bot.stop_polling()
    bot.stop_polling()


@bot.message_handler(commands=['clear'])
def clear(message):
    gc.enable()
    bot.send_message(message.chat.id, '–û—á–∏—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')


@bot.message_handler(content_types='text')
def msg(message):
    global sc
    if sc is None:
        sc = Scrap()
    if message.text == 'üîé–ò–Ω—Å—Ç–∞–≥—Ä–∞–º –ø–∞—Ä—Å–∏–Ω–≥':
        if sc.process_busy is False:
            bot.register_next_step_handler(bot.send_message(message.chat.id, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ'),
                                           step1)
        elif sc.process_busy is True:
            bot.send_message(message.chat.id, '–ó–∞–Ω—è—Ç–æ –Ω–µ–∑–∞–≤–µ—Ä–µ—à–µ–Ω–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º!\n–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /restart')

    if message.text == '‚è≥–ü—Ä–æ—Ü–µ—Å—Å':
        if sc.process_busy is True:
            try:
                msg = bot.send_message(message.chat.id, f'<b>–¢–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç:</b> {sc.user}\n<b>–ü–æ—Å—Ç–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ:</b> {len(sc.posts)}/{sc.number_of_posts}\n<b>–ù–∞–π–¥–µ–Ω–æ –æ—Ç–º–µ—Ç–æ–∫:</b> {len(sc.marks)}/{anw}\n<b>–ë–µ–∑—Ä–µ–∑—É–ª—å—Ç–∞—Ç–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: </b>{sc.counter_repeat}/{sc.kill_edge}', parse_mode='html')

            except Exception as e:
                print(e)

        else:
            bot.send_message(message.chat.id, str('–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤'))

    if message.text == 'üç™–ó–∞–≥—Ä—É–∑–∏—Ç—å cookies':
        markup = types.InlineKeyboardMarkup()
        item1 = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cookies_no')
        markup.add(item1)
        msg = bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª cookies', reply_markup=markup)
        bot.register_next_step_handler(msg, use_cookies)

    if message.text == 'üì•–ó–∞–ø—Ä–æ—Å–∏—Ç—å —É–∂–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã':
        try:
            if sc.saved(sc.marks):
                try:
                    if sc.usernames is not None:
                        usernames = str(sc.usernames).replace("'", "").replace('[', '').replace(']', '')
                        file = open('result_parser.txt', 'rb')
                        bot.send_document(message.chat.id, file, caption=usernames)
                    elif sc.usernames is None:
                        file = open('result_parser.txt', 'rb')
                        bot.send_document(message.chat.id, file)
                except:
                    bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
            else:
                bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        except:
            bot.send_message('–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤')


def step1(message):
    global anw
    anw = str(message.text)
    if anw.isdigit():  # –£—Å–ª–æ–≤–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —á–∏—Å–µ–ª
        anw = int(anw)
        if anw >= 1:
            bot.register_next_step_handler(bot.send_message(message.chat.id, '–Æ–∑–µ—Ä–Ω–µ–π–º—ã –∏–Ω—Å—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é'), step2)
        else:
            bot.send_message(message.chat.id, '–ß–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –µ—â—ë —Ä–∞–∑.')
            bot.register_next_step_handler(bot.send_message(message.chat.id, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ'),
                                           step1)
    else:
        bot.send_message(message.chat.id, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!')
        bot.register_next_step_handler(bot.send_message(message.chat.id, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ'), step1)


def step2(message):
    global sc
    try:
        bot.send_message(message.chat.id,
                         '–ë–æ—Ç –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É.\n–î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–æ–π "‚è≥–ü—Ä–æ—Ü–µ—Å—Å"')

        if sc is None:
            sc = Scrap()  # –°–æ–∑–¥–∞–ª —ç–∫–∑–µ–º–ª—è—Ä –∫–ª–∞—Å—Å–∞
            sc.scrap(sc.split_usernames(message.text), anw)
        else:
            sc.scrap(sc.split_usernames(message.text), anw)
        try:
            if sc.saved(sc.marks):
                try:
                    file = open('result_parser.txt', 'rb')
                    try:
                        bot.send_message(message.chat.id, f'–ì–æ—Ç–æ–≤–æ!\n<b>–û—Ç–º–µ—Ç–æ–∫ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ:</b> {len(sc.marks)}', parse_mode='html')
                    except:
                        bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ!')
                    try:
                        if sc.usernames is not None:
                            usernames = str(sc.usernames).replace("'", "").replace('[', '').replace(']', '')
                            file = open('result_parser.txt', 'rb')
                            bot.send_document(message.chat.id, file, caption=usernames)
                        elif sc.usernames is None:
                            file = open('result_parser.txt', 'rb')
                            bot.send_document(message.chat.id, file)
                    except:
                            bot.send_document(message.chat.id, file)
                            file.close()
                except:
                    bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.')

                pass
        except Exception as e:
            print(e)




    except Exception as e:
        bot.send_message(message.chat.id, f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!\n–í–æ–∑–º–æ–∂–Ω–æ —Ñ–∞–π–ª –æ–∫–∞–∑–∞–ª—Å—è –ø—É—Å—Ç—ã–º.')
        print(e)

    sc = None


@bot.message_handler(content_types=["document"])
def use_cookies(message):
    global file_info
    document_id = message.document.file_id
    markup = types.InlineKeyboardMarkup()
    item1 = types.InlineKeyboardButton('–î–∞', callback_data='cookies_yes')
    item2 = types.InlineKeyboardButton('–ù–µ—Ç', callback_data='cookies_no')
    markup.add(item1, item2)
    bot.send_message(message.chat.id, '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–π–ª cookies?', reply_markup=markup)
    file_info = bot.get_file(document_id)


@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    try:
        if call.message:
            if call.data == 'cookies_yes':
                urllib.request.urlretrieve(f'http://api.telegram.org/file/bot{config.token}/{file_info.file_path}',
                                           'insta.txt')
                print(file_info.file_path)
                bot.edit_message_text('Cookies –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã!', chat_id=call.message.chat.id,
                                      message_id=call.message.message_id)
            if call.data == 'cookies_no':
                bot.edit_message_text('–ò–∑–º–µ–Ω–µ–Ω–∏–µ cookies –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ!', chat_id=call.message.chat.id,
                                      message_id=call.message.message_id)

    except Exception as e:
        print(e)


bot.polling()
